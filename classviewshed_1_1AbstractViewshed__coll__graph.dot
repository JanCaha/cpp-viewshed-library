digraph "viewshed::AbstractViewshed"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [id="Node000001",label="viewshed::AbstractViewshed",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Abstract class that represents viewshed calculation from this class specific implementations ( Viewsh..."];
  Node2 -> Node1 [id="edge1_Node000001_Node000002",dir="back",color="darkorchid3",style="dashed",tooltip=" ",label=" mLoSNodeTemp\nmLosNodePoint",fontcolor="grey" ];
  Node2 [id="Node000002",label="viewshed::LoSNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classviewshed_1_1LoSNode.html",tooltip="Representation of single cell that creates a point on LoS."];
  Node3 -> Node2 [id="edge2_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="viewshed::RasterPosition",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classviewshed_1_1RasterPosition.html",tooltip="Class to represent position on raster in term of row and column."];
  Node4 -> Node1 [id="edge3_Node000001_Node000004",dir="back",color="darkorchid3",style="dashed",tooltip=" ",label=" mThreadPool",fontcolor="grey" ];
  Node4 [id="Node000004",label="BS::thread_pool",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classBS_1_1thread__pool.html",tooltip="A fast, lightweight, and easy-to-use C++17 thread pool class."];
  Node5 -> Node1 [id="edge4_Node000001_Node000005",dir="back",color="darkorchid3",style="dashed",tooltip=" ",label=" mEventCenter\nmEventEnter\nmEventEnterOpposite\nmEventExit\nmEventExitOpposite",fontcolor="grey" ];
  Node5 [id="Node000005",label="viewshed::CellEvent",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classviewshed_1_1CellEvent.html",tooltip="Class representing cell events for Van Kreveld's plane sweep algorithm. Stores cell position (row and..."];
  Node3 -> Node5 [id="edge5_Node000005_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 -> Node5 [id="edge6_Node000005_Node000006",dir="back",color="darkorchid3",style="dashed",tooltip=" ",label=" mEventType",fontcolor="grey" ];
  Node6 [id="Node000006",label="CellEventPositionType",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
}
